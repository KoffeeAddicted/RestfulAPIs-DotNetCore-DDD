name: Build and deploy Backend to VPS
run-name: "#${{ github.run_number }} - ${{ github.ref_name }} - ${{ github.sha }} - Backend"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.x
  WORKING_DIRECTORY: AudioApp

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
        
      - name: Restore
        run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
        
      - name: Build
        run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
        
      - name: Test
        run: dotnet test "${{ env.WORKING_DIRECTORY }}" --no-build

      - name: Run database migrations
        run: dotnet ef database update --project "${{ env.WORKING_DIRECTORY }}"
        env:
          DOTNET_ENVIRONMENT: Production
          DATABASE_CONNECTION_STRING: ${{ secrets.DATABASE_CONNECTION_STRING }}
        
      - name: Inject choose config appsetting
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/{{ env.WORKING_DIRECTORY }}/appsettings.json"
        env:
          ASPNETCORE_ENVIRONMENT: Prod
          
      - name: Inject DB secrets to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/{{ env.WORKING_DIRECTORY }}/appsettings.Prod.json"
        env:
          AppSettings.DatabaseConnectionString: ${{ secrets.DATABASE_CONNECTION_STRING }}
          
      - name: Inject AWS AccessKey to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/{{ env.WORKING_DIRECTORY }}/appsettings.Prod.json"
        env:
          AppSettings.AWSSettings.AccessKey: ${{ secrets.AWS_ACCESS_KEY }}
          
      - name: Inject AWS SecretKey to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/{{ env.WORKING_DIRECTORY }}/appsettings.Prod.json"
        env:
          AppSettings.AWSSettings.SecretKey: ${{ secrets.AWS_SECRET_KEY }}
          
      - name: Inject AWS S3 bucket name to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/{{ env.WORKING_DIRECTORY }}/appsettings.Prod.json"
        env:
          AppSettings.AWSSettings.BucketName: ${{ secrets.AWS_BUCKET_NAME }}
          
      - name: Inject AWS Cloudfront domain to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/{{ env.WORKING_DIRECTORY }}/appsettings.Prod.json"
        env:
          AppSettings.AWSSettings.CloudFrontDomain: ${{ secrets.AWS_CLOUDFRONT_DOMAIN }}

      - name: Inject secret signature to application
        uses: microsoft/variable-substitution@v1
        with:
          files: "${{ github.workspace }}/{{ env.WORKING_DIRECTORY }}/appsettings.Prod.json"
        env:
          AppSettings.SecretKey: ${{ secrets.SIGNATURE_KEY }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Extract metadata (tags, version) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/audio-app
          tags: |
            type=sha
            type=ref,event=branch
            type=raw,value=latest
  
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps: 
      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Deploy to VPS
        env:
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
          DOCKER_IMAGE: ${{ needs.build.outputs['meta'].outputs.tags }}
        run: |
          sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no -p $VPS_PORT $VPS_USERNAME@$VPS_IP <<EOF
            docker pull $DOCKER_IMAGE
            docker stop audio-app || true
            docker rm audio-app || true
            docker run -dp --name audio-app -p 8080:3000 $DOCKER_IMAGE
          EOF
